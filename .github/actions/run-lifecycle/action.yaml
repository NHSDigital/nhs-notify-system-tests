name: "Run Lifecycle Script"
description: "Runs a setup or teardown script for a given service and test suite, if it exists"

inputs:
  environment:
    description: "The name of the static environment being tested (e.g. main)"
    required: true
  phase:
    description: "The lifecycle phase to run: (setup or teardown)"
    required: true
  service:
    description: "The service name (e.g., auth, templates)"
    required: true
  suite:
    description: "The test suite name being executed: (security, product)"
    required: true
  github_token:
    description: GitHub access token
    required: true
  github_run_id:
    description: GitHub Run ID the action is being run from
    required: true
  github_repository:
    description: GitHub Repository the action is being run from (owner/repo-name format)
    required: true

runs:
  using: "composite"
  steps:
    - name: Validate phase input
      run: |
        case "${{ inputs.phase }}" in
          setup|teardown)
            echo "Valid phase input: ${{ inputs.phase }}"
            ;;
          *)
            echo "Invalid phase input: '${{ inputs.phase }}'"
            echo "Phase must be either 'setup' or 'teardown'"
            exit 1
            ;;
        esac
      shell: bash

    - name: Check if lifecycle script exists
      id: check-script
      run: |
        script="./tests/${{ inputs.suite }}/lifecycle/${{ inputs.service }}/${{ inputs.phase }}.sh"
        if [ -f "$script" ]; then
          echo "Found script at $script"
          dir="$(cd "$(dirname "$script")" && pwd)"
          file="$dir/${{ inputs.phase }}.sh"
          echo "script_exists=true" >> "$GITHUB_OUTPUT"
          echo "script_dir=$dir" >> "$GITHUB_OUTPUT"
          echo "script_file=$file" >> "$GITHUB_OUTPUT"
        else
          echo "No script found at $script â€” skipping execution"
          echo "script_exists=false" >> "$GITHUB_OUTPUT"
          echo "script_dir=" >> "$GITHUB_OUTPUT"
          echo "script_file=" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - name: Pre-teardown - attempt to download setup JSON artifact
      if: inputs.phase == 'teardown' && steps.check-script.outputs.script_exists == 'true'
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        ARTIFACT_NAME="${{ inputs.service }}-setup.json"
        DEST_PATH="${{ steps.check-script.outputs.script_dir }}"
        echo "Attempting to download artifact '$ARTIFACT_NAME' to $DEST_PATH ..."
        if gh run download "${{ inputs.github_run_id }}" --repo "${{ inputs.github_repository }}"--name "$ARTIFACT_NAME" --dir "$DEST_PATH"; then
          echo "Artifact '$ARTIFACT_NAME' downloaded successfully."
        else
          echo "Artifact '$ARTIFACT_NAME' not found. Continuing without it."
        fi
      shell: bash

    - name: Run ${{ inputs.suite }} test suite ${{ inputs.phase }} lifecycle script for {{ inputs.service }} service
      if: steps.check-script.outputs.script_exists == 'true'
      run: |
        echo "Running ${{ steps.check-script.outputs.script_file }} with environment '${{ inputs.environment }}'..."
        bash "${{ steps.check-script.outputs.script_file }}" "${{ inputs.environment }}"
      shell: bash

    - name: Post-setup - upload setup JSON file if it exists
      if: inputs.phase == 'setup' && steps.check-script.outputs.script_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.service }}-setup.json
        path: ${{ steps.check-script.outputs.script_dir }}/setup.json
        if-no-files-found: ignore
